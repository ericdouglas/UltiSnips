############# MISC
snippet fn "function" i
function $1($2) {
	$3
}
endsnippet

snippet af "function" i
function($1) {
	$2
}
endsnippet

snippet cl "console.log(...)" i
console.log($0);
endsnippet

snippet js "JSON.stringify formatted" i
JSON.stringify($1, null, 2)$2
endsnippet

############# Node.js
snippet re "require" b
const `!p
def formatVariableName(path):
	if path == 'react/addons':
		return 'React'

	lastPart = path.split('/')[-1]
  if lastPart == 'lodash':
		return '_'
	elif lastPart == 'jquery':
		return '$'
	else:
		return re.sub(r'[_\-]', '', lastPart.title())
snip.rv = formatVariableName(t[1])
` = require('${1}');$0
endsnippet

snippet me "module.exports" b
module.exports = $0;
endsnippet

snippet ee "exports"
exports = $0;
endsnippet

snippet rr "just require"
require('$1');
endsnippet

snippet vr "ES5 require"
var $1 = require('$1');
endsnippet

############# JSDoc
snippet cm
/**
 * ${0:${VISUAL}}
 */
endsnippet

snippet pr "@param {...}"
@param {${2:type}} ${1:name} - ${3:description}
endsnippet

snippet rt "@return {...}"
@return {${1:type}} - ${0:description}
endsnippet

snippet ct "@constructor"
@constructor
endsnippet

############# Tests
snippet ds "describe a test suite" b
describe('#$1', function() {
	$2
});
endsnippet

snippet it "describe a test" b
it('Should $1', function() {
	$2
});
endsnippet

snippet ae "afterEach" b
afterEach(function($1) {
	$2
});
endsnippet

snippet be "beforeEach" b
beforeEach(function($1) {
	$2
});
endsnippet

snippet ex "expect" b
expect($1).$2;
endsnippet
